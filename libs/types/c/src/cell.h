// Generated by Molecule 0.7.5

#define MOLECULEC_VERSION 7005
#define MOLECULE_API_VERSION_MIN 7000

#include "molecule_reader.h"
#include "molecule_builder.h"

#ifndef CELL_H
#define CELL_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef MOLECULE_API_DECORATOR
#define __DEFINE_MOLECULE_API_DECORATOR_CELL
#define MOLECULE_API_DECORATOR
#endif /* MOLECULE_API_DECORATOR */

#include "basic.h"

/*
 * Reader APIs
 */

MOLECULE_API_DECORATOR  mol_errno       MolReader_GovernanceMembers_verify              (const mol_seg_t*, bool);
#define                                 MolReader_GovernanceMembers_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_GovernanceMembers_has_extra_fields(s) mol_table_has_extra_fields(s, 4)
#define                                 MolReader_GovernanceMembers_get_parent_id(s)    mol_table_slice_by_index(s, 0)
#define                                 MolReader_GovernanceMembers_get_lock_args(s)    mol_table_slice_by_index(s, 1)
#define                                 MolReader_GovernanceMembers_get_multisig_args(s) mol_table_slice_by_index(s, 2)
#define                                 MolReader_GovernanceMembers_get_members(s)      mol_table_slice_by_index(s, 3)
MOLECULE_API_DECORATOR  mol_errno       MolReader_Tick_verify                           (const mol_seg_t*, bool);
#define                                 MolReader_Tick_actual_field_count(s)            mol_table_actual_field_count(s)
#define                                 MolReader_Tick_has_extra_fields(s)              mol_table_has_extra_fields(s, 7)
#define                                 MolReader_Tick_get_tick_type(s)                 mol_table_slice_by_index(s, 0)
#define                                 MolReader_Tick_get_token_id(s)                  mol_table_slice_by_index(s, 1)
#define                                 MolReader_Tick_get_value(s)                     mol_table_slice_by_index(s, 2)
#define                                 MolReader_Tick_get_merchant(s)                  mol_table_slice_by_index(s, 3)
#define                                 MolReader_Tick_get_coin_type(s)                 mol_table_slice_by_index(s, 4)
#define                                 MolReader_Tick_get_tx_hash(s)                   mol_table_slice_by_index(s, 5)
#define                                 MolReader_Tick_get_receipt_addr(s)              mol_table_slice_by_index(s, 6)
#define                                 MolReader_Auth_verify(s, c)                     mol_verify_fixed_size(s, 21)
#define                                 MolReader_Auth_get_nth0(s)                      mol_slice_by_offset(s, 0, 1)
#define                                 MolReader_Auth_get_nth1(s)                      mol_slice_by_offset(s, 1, 1)
#define                                 MolReader_Auth_get_nth2(s)                      mol_slice_by_offset(s, 2, 1)
#define                                 MolReader_Auth_get_nth3(s)                      mol_slice_by_offset(s, 3, 1)
#define                                 MolReader_Auth_get_nth4(s)                      mol_slice_by_offset(s, 4, 1)
#define                                 MolReader_Auth_get_nth5(s)                      mol_slice_by_offset(s, 5, 1)
#define                                 MolReader_Auth_get_nth6(s)                      mol_slice_by_offset(s, 6, 1)
#define                                 MolReader_Auth_get_nth7(s)                      mol_slice_by_offset(s, 7, 1)
#define                                 MolReader_Auth_get_nth8(s)                      mol_slice_by_offset(s, 8, 1)
#define                                 MolReader_Auth_get_nth9(s)                      mol_slice_by_offset(s, 9, 1)
#define                                 MolReader_Auth_get_nth10(s)                     mol_slice_by_offset(s, 10, 1)
#define                                 MolReader_Auth_get_nth11(s)                     mol_slice_by_offset(s, 11, 1)
#define                                 MolReader_Auth_get_nth12(s)                     mol_slice_by_offset(s, 12, 1)
#define                                 MolReader_Auth_get_nth13(s)                     mol_slice_by_offset(s, 13, 1)
#define                                 MolReader_Auth_get_nth14(s)                     mol_slice_by_offset(s, 14, 1)
#define                                 MolReader_Auth_get_nth15(s)                     mol_slice_by_offset(s, 15, 1)
#define                                 MolReader_Auth_get_nth16(s)                     mol_slice_by_offset(s, 16, 1)
#define                                 MolReader_Auth_get_nth17(s)                     mol_slice_by_offset(s, 17, 1)
#define                                 MolReader_Auth_get_nth18(s)                     mol_slice_by_offset(s, 18, 1)
#define                                 MolReader_Auth_get_nth19(s)                     mol_slice_by_offset(s, 19, 1)
#define                                 MolReader_Auth_get_nth20(s)                     mol_slice_by_offset(s, 20, 1)
MOLECULE_API_DECORATOR  mol_errno       MolReader_IdentityOpt_verify                    (const mol_seg_t*, bool);
#define                                 MolReader_IdentityOpt_is_none(s)                mol_option_is_none(s)
MOLECULE_API_DECORATOR  mol_errno       MolReader_OmniLockWitnessLock_verify            (const mol_seg_t*, bool);
#define                                 MolReader_OmniLockWitnessLock_actual_field_count(s) mol_table_actual_field_count(s)
#define                                 MolReader_OmniLockWitnessLock_has_extra_fields(s) mol_table_has_extra_fields(s, 3)
#define                                 MolReader_OmniLockWitnessLock_get_signature(s)  mol_table_slice_by_index(s, 0)
#define                                 MolReader_OmniLockWitnessLock_get_omni_identity(s) mol_table_slice_by_index(s, 1)
#define                                 MolReader_OmniLockWitnessLock_get_preimage(s)   mol_table_slice_by_index(s, 2)

/*
 * Builder APIs
 */

#define                                 MolBuilder_GovernanceMembers_init(b)            mol_table_builder_initialize(b, 256, 4)
#define                                 MolBuilder_GovernanceMembers_set_parent_id(b, p, l) mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_GovernanceMembers_set_lock_args(b, p, l) mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_GovernanceMembers_set_multisig_args(b, p, l) mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_GovernanceMembers_set_members(b, p, l) mol_table_builder_add(b, 3, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_GovernanceMembers_build              (mol_builder_t);
#define                                 MolBuilder_GovernanceMembers_clear(b)           mol_builder_discard(b)
#define                                 MolBuilder_Tick_init(b)                         mol_table_builder_initialize(b, 512, 7)
#define                                 MolBuilder_Tick_set_tick_type(b, p)             mol_table_builder_add_byte(b, 0, p)
#define                                 MolBuilder_Tick_set_token_id(b, p, l)           mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_Tick_set_value(b, p, l)              mol_table_builder_add(b, 2, p, l)
#define                                 MolBuilder_Tick_set_merchant(b, p, l)           mol_table_builder_add(b, 3, p, l)
#define                                 MolBuilder_Tick_set_coin_type(b, p, l)          mol_table_builder_add(b, 4, p, l)
#define                                 MolBuilder_Tick_set_tx_hash(b, p, l)            mol_table_builder_add(b, 5, p, l)
#define                                 MolBuilder_Tick_set_receipt_addr(b, p, l)       mol_table_builder_add(b, 6, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_Tick_build                           (mol_builder_t);
#define                                 MolBuilder_Tick_clear(b)                        mol_builder_discard(b)
#define                                 MolBuilder_Auth_init(b)                         mol_builder_initialize_fixed_size(b, 21)
#define                                 MolBuilder_Auth_set_nth0(b, p)                  mol_builder_set_byte_by_offset(b, 0, p)
#define                                 MolBuilder_Auth_set_nth1(b, p)                  mol_builder_set_byte_by_offset(b, 1, p)
#define                                 MolBuilder_Auth_set_nth2(b, p)                  mol_builder_set_byte_by_offset(b, 2, p)
#define                                 MolBuilder_Auth_set_nth3(b, p)                  mol_builder_set_byte_by_offset(b, 3, p)
#define                                 MolBuilder_Auth_set_nth4(b, p)                  mol_builder_set_byte_by_offset(b, 4, p)
#define                                 MolBuilder_Auth_set_nth5(b, p)                  mol_builder_set_byte_by_offset(b, 5, p)
#define                                 MolBuilder_Auth_set_nth6(b, p)                  mol_builder_set_byte_by_offset(b, 6, p)
#define                                 MolBuilder_Auth_set_nth7(b, p)                  mol_builder_set_byte_by_offset(b, 7, p)
#define                                 MolBuilder_Auth_set_nth8(b, p)                  mol_builder_set_byte_by_offset(b, 8, p)
#define                                 MolBuilder_Auth_set_nth9(b, p)                  mol_builder_set_byte_by_offset(b, 9, p)
#define                                 MolBuilder_Auth_set_nth10(b, p)                 mol_builder_set_byte_by_offset(b, 10, p)
#define                                 MolBuilder_Auth_set_nth11(b, p)                 mol_builder_set_byte_by_offset(b, 11, p)
#define                                 MolBuilder_Auth_set_nth12(b, p)                 mol_builder_set_byte_by_offset(b, 12, p)
#define                                 MolBuilder_Auth_set_nth13(b, p)                 mol_builder_set_byte_by_offset(b, 13, p)
#define                                 MolBuilder_Auth_set_nth14(b, p)                 mol_builder_set_byte_by_offset(b, 14, p)
#define                                 MolBuilder_Auth_set_nth15(b, p)                 mol_builder_set_byte_by_offset(b, 15, p)
#define                                 MolBuilder_Auth_set_nth16(b, p)                 mol_builder_set_byte_by_offset(b, 16, p)
#define                                 MolBuilder_Auth_set_nth17(b, p)                 mol_builder_set_byte_by_offset(b, 17, p)
#define                                 MolBuilder_Auth_set_nth18(b, p)                 mol_builder_set_byte_by_offset(b, 18, p)
#define                                 MolBuilder_Auth_set_nth19(b, p)                 mol_builder_set_byte_by_offset(b, 19, p)
#define                                 MolBuilder_Auth_set_nth20(b, p)                 mol_builder_set_byte_by_offset(b, 20, p)
#define                                 MolBuilder_Auth_build(b)                        mol_builder_finalize_simple(b)
#define                                 MolBuilder_Auth_clear(b)                        mol_builder_discard(b)
#define                                 MolBuilder_IdentityOpt_init(b)                  mol_builder_initialize_fixed_size(b, 0)
#define                                 MolBuilder_IdentityOpt_set(b, p, l)             mol_option_builder_set(b, p, l)
#define                                 MolBuilder_IdentityOpt_build(b)                 mol_builder_finalize_simple(b)
#define                                 MolBuilder_IdentityOpt_clear(b)                 mol_builder_discard(b)
#define                                 MolBuilder_OmniLockWitnessLock_init(b)          mol_table_builder_initialize(b, 64, 3)
#define                                 MolBuilder_OmniLockWitnessLock_set_signature(b, p, l) mol_table_builder_add(b, 0, p, l)
#define                                 MolBuilder_OmniLockWitnessLock_set_omni_identity(b, p, l) mol_table_builder_add(b, 1, p, l)
#define                                 MolBuilder_OmniLockWitnessLock_set_preimage(b, p, l) mol_table_builder_add(b, 2, p, l)
MOLECULE_API_DECORATOR  mol_seg_res_t   MolBuilder_OmniLockWitnessLock_build            (mol_builder_t);
#define                                 MolBuilder_OmniLockWitnessLock_clear(b)         mol_builder_discard(b)

/*
 * Default Value
 */

#define ____ 0x00

MOLECULE_API_DECORATOR const uint8_t MolDefault_GovernanceMembers[36] =  {
    0x24, ____, ____, ____, 0x14, ____, ____, ____, 0x18, ____, ____, ____,
    0x1c, ____, ____, ____, 0x20, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, 0x04, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Tick[118]        =  {
    0x76, ____, ____, ____, 0x20, ____, ____, ____, 0x21, ____, ____, ____,
    0x25, ____, ____, ____, 0x35, ____, ____, ____, 0x6a, ____, ____, ____,
    0x6e, ____, ____, ____, 0x72, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, 0x35, ____, ____, ____, 0x10, ____, ____,
    ____, 0x30, ____, ____, ____, 0x31, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_Auth[21]         =  {
    ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____, ____,
    ____, ____, ____, ____, ____, ____, ____, ____, ____,
};
MOLECULE_API_DECORATOR const uint8_t MolDefault_IdentityOpt[0]   =  {};
MOLECULE_API_DECORATOR const uint8_t MolDefault_OmniLockWitnessLock[16] =  {
    0x10, ____, ____, ____, 0x10, ____, ____, ____, 0x10, ____, ____, ____,
    0x10, ____, ____, ____,
};

#undef ____

/*
 * Reader Functions
 */

MOLECULE_API_DECORATOR mol_errno MolReader_GovernanceMembers_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 4) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 4) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_BytesVec_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_Tick_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 7) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 7) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        if (offsets[1] - offsets[0] != 1) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_Uint128_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[3];
        inner.size = offsets[4] - offsets[3];
        errno = MolReader_Script_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[4];
        inner.size = offsets[5] - offsets[4];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[5];
        inner.size = offsets[6] - offsets[5];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[6];
        inner.size = offsets[7] - offsets[6];
        errno = MolReader_Bytes_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}
MOLECULE_API_DECORATOR mol_errno MolReader_IdentityOpt_verify (const mol_seg_t *input, bool compatible) {
    if (input->size != 0) {
        return MolReader_Bytes_verify(input, compatible);
    } else {
        return MOL_OK;
    }
}
MOLECULE_API_DECORATOR mol_errno MolReader_OmniLockWitnessLock_verify (const mol_seg_t *input, bool compatible) {
    if (input->size < MOL_NUM_T_SIZE) {
        return MOL_ERR_HEADER;
    }
    uint8_t *ptr = input->ptr;
    mol_num_t total_size = mol_unpack_number(ptr);
    if (input->size != total_size) {
        return MOL_ERR_TOTAL_SIZE;
    }
    if (input->size < MOL_NUM_T_SIZE * 2) {
        return MOL_ERR_HEADER;
    }
    ptr += MOL_NUM_T_SIZE;
    mol_num_t offset = mol_unpack_number(ptr);
    if (offset % 4 > 0 || offset < MOL_NUM_T_SIZE*2) {
        return MOL_ERR_OFFSET;
    }
    mol_num_t field_count = offset / 4 - 1;
    if (field_count < 3) {
        return MOL_ERR_FIELD_COUNT;
    } else if (!compatible && field_count > 3) {
        return MOL_ERR_FIELD_COUNT;
    }
    if (input->size < MOL_NUM_T_SIZE*(field_count+1)){
        return MOL_ERR_HEADER;
    }
    mol_num_t offsets[field_count+1];
    offsets[0] = offset;
    for (mol_num_t i=1; i<field_count; i++) {
        ptr += MOL_NUM_T_SIZE;
        offsets[i] = mol_unpack_number(ptr);
        if (offsets[i-1] > offsets[i]) {
            return MOL_ERR_OFFSET;
        }
    }
    if (offsets[field_count-1] > total_size) {
        return MOL_ERR_OFFSET;
    }
    offsets[field_count] = total_size;
        mol_seg_t inner;
        mol_errno errno;
        inner.ptr = input->ptr + offsets[0];
        inner.size = offsets[1] - offsets[0];
        errno = MolReader_BytesOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[1];
        inner.size = offsets[2] - offsets[1];
        errno = MolReader_IdentityOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
        inner.ptr = input->ptr + offsets[2];
        inner.size = offsets[3] - offsets[2];
        errno = MolReader_BytesOpt_verify(&inner, compatible);
        if (errno != MOL_OK) {
            return MOL_ERR_DATA;
        }
    return MOL_OK;
}

/*
 * Builder Functions
 */

MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_GovernanceMembers_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 20;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_BytesVec, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_Tick_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 32;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 1 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 16 : len;
    len = builder.number_ptr[7];
    res.seg.size += len == 0 ? 53 : len;
    len = builder.number_ptr[9];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[11];
    res.seg.size += len == 0 ? 4 : len;
    len = builder.number_ptr[13];
    res.seg.size += len == 0 ? 4 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 1 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 16 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[7];
    offset += len == 0 ? 53 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[9];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[11];
    offset += len == 0 ? 4 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[13];
    offset += len == 0 ? 4 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 1;
        *dst = 0;
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 16;
        memcpy(dst, &MolDefault_Uint128, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[7];
    if (len == 0) {
        len = 53;
        memcpy(dst, &MolDefault_Script, len);
    } else {
        mol_num_t of = builder.number_ptr[6];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[9];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[8];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[11];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[10];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[13];
    if (len == 0) {
        len = 4;
        memcpy(dst, &MolDefault_Bytes, len);
    } else {
        mol_num_t of = builder.number_ptr[12];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}
MOLECULE_API_DECORATOR mol_seg_res_t MolBuilder_OmniLockWitnessLock_build (mol_builder_t builder) {
    mol_seg_res_t res;
    res.errno = MOL_OK;
    mol_num_t offset = 16;
    mol_num_t len;
    res.seg.size = offset;
    len = builder.number_ptr[1];
    res.seg.size += len == 0 ? 0 : len;
    len = builder.number_ptr[3];
    res.seg.size += len == 0 ? 0 : len;
    len = builder.number_ptr[5];
    res.seg.size += len == 0 ? 0 : len;
    res.seg.ptr = (uint8_t*)malloc(res.seg.size);
    uint8_t *dst = res.seg.ptr;
    mol_pack_number(dst, &res.seg.size);
    dst += MOL_NUM_T_SIZE;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[1];
    offset += len == 0 ? 0 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[3];
    offset += len == 0 ? 0 : len;
    mol_pack_number(dst, &offset);
    dst += MOL_NUM_T_SIZE;
    len = builder.number_ptr[5];
    offset += len == 0 ? 0 : len;
    uint8_t *src = builder.data_ptr;
    len = builder.number_ptr[1];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_BytesOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[0];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[3];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_IdentityOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[2];
        memcpy(dst, src+of, len);
    }
    dst += len;
    len = builder.number_ptr[5];
    if (len == 0) {
        len = 0;
        memcpy(dst, &MolDefault_BytesOpt, len);
    } else {
        mol_num_t of = builder.number_ptr[4];
        memcpy(dst, src+of, len);
    }
    dst += len;
    mol_builder_discard(builder);
    return res;
}

#ifdef __DEFINE_MOLECULE_API_DECORATOR_CELL
#undef MOLECULE_API_DECORATOR
#undef __DEFINE_MOLECULE_API_DECORATOR_CELL
#endif /* __DEFINE_MOLECULE_API_DECORATOR_CELL */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CELL_H */
