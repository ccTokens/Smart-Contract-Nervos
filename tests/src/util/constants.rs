#![allow(dead_code)]

// use ckb_testtool::ckb_types::{h256, H256};
use lazy_static::lazy_static;
use regex::Regex;

/// Predefine all type IDs and type args in tests.
/// First, create a type args constant for the contract and execute any tests that call the contract.
/// Then, the type ID calculated from the type args will be printed in the console. Copy and paste it as another constant here.
/// You can now utilize the type ID as a constant in the tests.
pub const CONFIG_CELL_TYPE_ARGS: &str = "0xFFFF";
pub const CONFIG_CELL_TYPE_ID: &str = "0xc25886ca81aafbe4c92fa3243e7973557dd762ea3ac6ce5b0cca363ad8d2e53b01";
pub const ALWAYS_SUCCESS_TYPE_ID: &str = "0x946f717cf6324bcd09ebfbdfabab3cd41d49d6b2091f4c529d58ea3aa8356b5b";
pub const ALWAYS_SUCCESS_TYPE_ARGS: &str = "0x0101010101010101010101010101010101010101010101010101010101010101";
pub const FAKE_OMNI_LOCK_TYPE_ARGS: &str = "0x0011";
pub const FAKE_OMNI_LOCK_TYPE_ID: &str = "0x4a772d83a35068cd8125f0993845452495c2c20064f2170a1ee0b9503fa52f0a";
pub const FAKE_SECPK1_BLAKE160_SIGNHASH_ALL_ARGS: &str = "0x0022";
pub const FAKE_SECPK1_BLAKE160_SIGNHASH_TYPE_ID: &str =
    "0x1ff91995a273007794d42816a272b22265021facaa4b5f1b1edd5fe422927b28";
pub const GOVERNANCE_MEMBER_CELL_TYPE_ARGS: &str = "0x01";
pub const GOVERNANCE_MEMBER_CELL_TYPE_ID: &str = "0x73b2efdea4f0ac93de80169165bd3d28e7477ee9ed798ac5ecd81d0c2e027ba7";
pub const TICK_CELL_TYPE_ID: &str = "0x0000000000000000000000000000000000000000000000000000000000000000";
pub const TICK_CELL_TYPE_ARGS: &str = "0x0404040404040404040404040404040404040404040404040404040404040404";

pub const XUDT_RCE_TYPE_ARGS: &str = "0x0202020202020202020202020202020202020202020202020202020202020202";
pub const XUDT_RCE_TYPE_ID: &str = "0x77ea9d0271c99715b4180f0ac6b5e55b37cd94a8c04e981498ff5adfe1a3765f";
pub const XUDT_OWNER_TYPE_ARGS: &str = "0x0066";
pub const XUDT_OWNER_TYPE_ID: &str = "0xbdeb1edc5c81a32c1098e9703d90f2b0e47e8f199c815634dae03e49033e5bde";
pub const FAKE_XUDT_OWNER_TYPE_ARGS: &str = "0x0066";
pub const FAKE_XUDT_OWNER_TYPE_ID: &str = "0xbdeb1edc5c81a32c1098e9703d90f2b0e47e8f199c815634dae03e49033e5bde";

pub const TYPE_ID_CODE_HASH: &str = "0x00000000000000000000000000000000000000000000000000545950455f4944";

// ⚠️ The maximum cycles on-chain is 3500_000_000.
pub const MAX_CYCLES: u64 = u64::MAX;

pub const ONE_CKB: u64 = 100_000_000;

pub const SECP_SIGNATURE_SIZE: usize = 65;

pub const DEPLOY_LOCK_ARGS: &str = "0x1100000000000000000000000000000000000011";
pub const OWNER_LOCK_ARGS_1: &str = "0x060000000000000000000000000000000000000001";
pub const OWNER_LOCK_ARGS_2: &str = "0x060000000000000000000000000000000000000002";
pub const DUMMY_LOCK_ARGS: &str = "0xff00000000000000000000000000000000000000";

pub const CUSTODIAN_LOCK_ARGS_1: &str = "0xFF00000000000000000000000000000000000001";
pub const CUSTODIAN_LOCK_ARGS_2: &str = "0xFF00000000000000000000000000000000000002";
pub const CUSTODIAN_LOCK_ARGS_3: &str = "0xFF00000000000000000000000000000000000003";
pub const CUSTODIAN_LOCK_ARGS_4: &str = "0xFF00000000000000000000000000000000000004";
pub const CUSTODIAN_LOCK_ARGS_5: &str = "0xFF00000000000000000000000000000000000005";

pub const MERCHANT_LOCK_ARGS_1: &str = "0xEE00000000000000000000000000000000000001";
pub const MERCHANT_LOCK_ARGS_2: &str = "0xEE00000000000000000000000000000000000002";
pub const MERCHANT_LOCK_ARGS_3: &str = "0xEE00000000000000000000000000000000000003";
pub const MERCHANT_LOCK_ARGS_4: &str = "0xEE00000000000000000000000000000000000004";
pub const MERCHANT_LOCK_ARGS_5: &str = "0xEE00000000000000000000000000000000000005";

pub const TYPE_ID_ARGS: &str = "0xff000000000000000000000000000000000000000000000000000000000000ff";

pub const DUMMY_TX_HASH: &str = "0x0000000000000000000000000000000000000000000000000000000000000000";

#[repr(i8)]
pub enum ExpectedError {
    OwnerLockIsRequired = 15,
    CustodianLockMustNotInMerchants = 17,
}

lazy_static! {
    pub static ref RE_VARIABLE: Regex = Regex::new(r"\{\{([\w\-\.]+)\}\}").unwrap();
}
